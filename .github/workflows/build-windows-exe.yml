# .github/workflows/build-windows-exe.yml

name: Build Windows EXE

# This action triggers on every push to the 'main' branch.
on:
  push:
    branches: [ main ]
  # This also allows you to run the workflow manually from the Actions tab.
  workflow_dispatch:

jobs:
  build-windows:
    name: Build Windows Executable
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 'latest'

      - name: Configure Poetry
        # This is a best practice for CI. It tells Poetry to create the virtual
        # environment in a '.venv' folder within the project directory.
        run: python -m poetry config virtualenvs.in-project true

      - name: Install project dependencies
        # CORRECTED: We call poetry as a python module to avoid PATH issues.
        run: python -m poetry install --no-interaction

      - name: Build executable with PyInstaller
        # CORRECTED: We use 'python -m poetry run' to execute the pyinstaller command
        # within the virtual environment managed by Poetry.
        run: python -m poetry run pyinstaller --name docling --onefile docling/cli.py

      - name: Upload EXE as a workflow artifact
        uses: actions/upload-artifact@v4
        with:
          name: docling-windows-exe
          path: dist/docling.exe